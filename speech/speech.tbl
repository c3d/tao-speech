// *****************************************************************************
// speech.tbl                                                      Tao3D project
// *****************************************************************************
//
// File description:
//
//     Definition of the interface between XLR and native code
//     for the speech module.
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2013-2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2013, Jérôme Forissier <jerome@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

PREFIX(SpeechTalk,  boolean, "say",
       PARM(words, text, "Text to say"),
       return speech_say(self, words),
       GROUP(module.Speech)
       SYNOPSIS("Say something from the input text"))

PREFIX(SpeechSetVoice,  text, "voice",
       PARM(voice, text, "Voice to use for later speech"),
       return speech_voice(self, voice),
       GROUP(module.Speech)
       SYNOPSIS("Change the voice for the next speech."))

PREFIX(SpeechVoicesList,  tree, "voices",
       PARM(count, integer, ""),
       return speech_voices(self, count),
       GROUP(module.Speech)
       SYNOPSIS("Return a comma-separated list of available voices"))
